--- a/xRX750/platform_xrx750.c
+++ b/xRX750/platform_xrx750.c
@@ -59,10 +59,8 @@ static int32_t xRX750_set_aqrParams(char
 static int32_t xRX750_set_aqrParams_from_nvram(char *modules[][2]);
 static void xRX750_run_link(void);
 static int32_t xRX750_load_modules(char *modules[][2]);
-int32_t check_sync_status(void);
 static char *xRX750_check_boardID(void);
 static char *xRX750_check_boardRev(void);
-static int32_t xRX750_wan_reset(void);
 static int32_t write_to_file(char *fileName, char *buffer);
 
 /* struct definitions */
@@ -411,45 +409,6 @@ int32_t xRX750_module_unload(WAN_TYPE_t
 }
 
 /* =============================================================================
-* Function Name : check_sync_status                                         *
-* Description   : this function checks NP cpu booting status                *
-*         and poll until critical boot is finished. returns success         *
-    *         if boot was done                                              *
-* Input     : None                                                          *
-* OutPut    : None                                                          *
-* Returns       : UGW_SUCCESS/UGW_FAILURE                                      *
-============================================================================== */
-int32_t check_sync_status(void)
-{
-	FILE *fp;
-	int attempts = 0;
-	char fbuf[MAX_DATA_LEN] = "\0";
-
-	fp = fopen("/sys/devices/platform/handshake/status", "r");
-	if (fp == NULL) {
-		LOGF_LOG_CRITICAL("/sys/devices/platform/handshake/status not found!\n");
-		return ERR_FILE_NOT_FOUND;
-	}
-	do {
-		fgets(fbuf, MAX_DATA_LEN, fp);
-		if (strstr(fbuf, "0") != NULL)
-			break;
-		usleep(100);
-		attempts++;
-	} while (attempts < 20);
-
-	if (attempts >= 20) {
-		LOGF_LOG_CRITICAL("CPU sync failed!\n");
-		fclose(fp);
-		return ERR_INVALID_PARAMETER_REQUEST;
-	}
-
-	LOGF_LOG_DEBUG("CPU sync completed successfully\n");
-	fclose(fp);
-	return UGW_SUCCESS;
-}
-
-/* =============================================================================
 * Function Name : xRX750_check_boardRev                                        *
 * Description   : This function checks Board revision type                     *
 * Input     : None                                                             *
@@ -567,63 +526,6 @@ static inline int32_t xRX750_is_intel_wa
 }
 
 /* =============================================================================
-* Function Name : xRX750_wan_reset                                             *
-* Description   : This function reset WAN HW line in Haven Park                *
-* Input     : None                                                             *
-* OutPut    : None                                                             *
-* Returns   : SUCCESS/FAILURE                                                  *
-============================================================================== */
-
-static int32_t xRX750_wan_reset(void)
-{
-	FILE *fp = NULL;
-	char str_gpio[MAX_NAME_LEN];
-
-	if (!xRX750_is_intel_wan()) {
-		LOGF_LOG_DEBUG("no WAN reset required\n");
-		return UGW_SUCCESS;
-	}
-
-	/*Export WAN GPIO for read/write */
-	fp = fopen("/sys/class/gpio/export", "w");
-	if (fp == NULL) {
-		LOGF_LOG_ERROR("/sys/class/gpio/export not found!!\n");
-		return UGW_FAILURE;
-	}
-	fprintf(fp, WAN_GPIO_VAL);
-	fflush(fp);
-	fclose(fp);
-
-	/*Toggle WAN reset for 150[msec] */
-	snprintf(str_gpio, sizeof(str_gpio), "/sys/class/gpio/gpio%s/value", WAN_GPIO_VAL);
-	fp = fopen(str_gpio, "w");
-	if (fp == NULL) {
-		LOGF_LOG_ERROR("%s not found!!\n", str_gpio);
-		return UGW_FAILURE;
-	}
-
-	/*WAN OFF*/
-	fprintf(fp, "0");
-	fflush(fp);
-
-	/* WA for JIRA:UGW_SW-10122 - Do WAN PHY OFF for HVP */
-	if (strstr(xRX750_check_boardID(), HVP_BOARD_ID) != NULL) {
-		LOGF_LOG_DEBUG("HVP WAN PHY OFF\n");
-		fclose(fp);
-		return UGW_SUCCESS;
-	}
-
-	usleep(200000);
-	/*WAN ON*/
-	fprintf(fp, "1");
-	fclose(fp);
-
-	LOGF_LOG_DEBUG("Finished WAN reset process");
-
-	return UGW_SUCCESS;
-}
-
-/* =============================================================================
 * Function Name : xRX750_run_link                                              *
 * Description   : This function checks current board type and run link         *
 *                 script accordingly                                           *
@@ -755,22 +657,11 @@ int32_t xRX750_module_init(void)
 	memset_ss(&sys_cfg, sizeof(sys_cfg_t), 0);
 	memset_ss(&PPA_Cfg, sizeof(PPA_Cfg), 0);
 
-	/* Power on SFP */
-	ret = scapi_spawn("echo 0 > /sys/devices/pci0000\\:00/80862BC1\\:01/i2c-1/1-a0a0/service_level", SCAPI_BLOCK, &nChildStatusExit);
-	sleep(5);
-
-	ret = check_sync_status();
-	if (ret)
-		return ret;
-
-	if (xRX750_wan_reset() != UGW_SUCCESS)
-		return UGW_FAILURE;
-
 	LOGF_LOG_DEBUG("Pre init Modules Initialisation..\n");
 	xRX750_load_modules(pumaPreInitModules);
 
 	/* download packet processor firmware */
-	scapi_spawn("/opt/lantiq/usr/sbin/pp_fw_download", SCAPI_BLOCK, &nChildStatusExit);
+	scapi_spawn("/opt/intel/usr/sbin/pp_fw_download", SCAPI_BLOCK, &nChildStatusExit);
 
 	LOGF_LOG_DEBUG("Post init Modules Initialisation..\n");
 	if (!strcmp(xRX750_check_boardRev(), AQR_PHY_TYPE)) {
@@ -783,6 +674,7 @@ int32_t xRX750_module_init(void)
 		xRX750_set_aqrParams_from_nvram(pumaPostInitModules); //Load from nvram
 	}
 	xRX750_load_modules(pumaPostInitModules);
+	system("/usr/sbin/link_cgp");
 
 	LOGF_LOG_INFO("Linking Interfaces..");
 	xRX750_run_link();
--- a/xRX750/platform_xrx750.h
+++ b/xRX750/platform_xrx750.h
@@ -63,7 +63,6 @@ static char * pumaPostInitModules[][2] =
 	{"aesni-intel.ko", ""},
 	{"DWC_ETH_QOS_GBE.ko", AQS_Setting}, //To make the setting of sgmii0 dynamic
 	{"DWC_ETH_QOS.ko", "tso_enable=1 gmac5to4_speed=2500"},
-	{"drv_switch_api.ko", ""},
 #ifdef CONFIG_UGW_PUMA_POWER_BUTTON
 	{"gpio-button-hotplug.ko", ""},
 #endif
